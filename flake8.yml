version: 2.1
orbs:
  utils: arrai/utils@1.5.0
executors:
  python38:
    environment:
        LANG: C.UTF-8
    docker:
     - image: circleci/python:3.8
  python37:
    environment:
        LANG: C.UTF-8
    docker:
     - image: circleci/python:3.7
  python36:
    environment:
        LANG: C.UTF-8
    docker:
     - image: circleci/python:3.6
  python35:
    environment:
        LANG: C.UTF-8
    docker:
     - image: circleci/python:3.5
jobs:
  flake8:
    parameters:
      wd:
        type: string
        default: ./${CIRCLE_PROJECT_REPONAME}
      executor:
        type: executor
        default: python36
    executor: <<parameters.executor>>
    resource_class: small
    steps:
      - checkout
      - utils/add_ssh_config
      - run: sudo apt-get install rsync
      - setup_flake8:
          wd: <<parameters.wd>>
      - flake8_errors:
          wd: <<parameters.wd>>
      - utils/make_status_shield:
          when: on_fail
          status: errors
          color: red
          logo: python
      - flake8_warnings:
          wd: <<parameters.wd>>
      - utils/make_status_shield:
          when: always
          status: warnings
          color: orange
          logo: python
          preserve: true
      - utils/make_status_shield:
          when: on_success
          status: passed
          color: brightgreen
          logo: python
      - utils/rsync_file:
          when: always
          file: ~/status.svg
          remote_file: $CIRCLE_BRANCH.$CIRCLE_JOB.svg
          host: docs
commands:
  setup_flake8:
    description: "Set up a python virtual environment to run flake8"
    parameters:
      wd:
        type: string
    steps:
      - run:
          name: "Set up python virtual environment."
          command: |
            cd <<parameters.wd>>
            python3 -m venv ${HOME}/.venv/
            . ~/.venv/bin/activate
            echo "source ${HOME}/.venv/bin/activate" >> $BASH_ENV
            if [ -f flake8_requirements.txt ]; then
                pip install -r flake8_requirements.txt | cat; test ${PIPESTATUS[0]} -eq 0
            else
                pip install flake8 | cat; test ${PIPESTATUS[0]} -eq 0
            fi
  flake8_errors:
    description: "Run flake8, checking for errors only."
    parameters:
      wd:
        type: string
    steps:
      - run:
          name: "Check for errors."
          command: |
            cd <<parameters.wd>>
            if [ -f .flake8errors ]; then
                flake8 --append-config=.flake8errors
            else
                flake8 --extend-ignore="$FLAKE8_WARNINGS"
            fi
  flake8_warnings:
    description: "Run flake8, checking for warnings only."
    parameters:
      wd:
        type: string
    steps:
      - run:
          name: "Check for warnings."
          command: |
            cd <<parameters.wd>>
            if [ -f .flake8warnings ]; then
                flake8 --append-config=.flake8warnings
            else
                flake8 --extend-ignore="$FLAKE8_ERRORS"
            fi
          when: always
