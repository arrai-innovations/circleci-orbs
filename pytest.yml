version: 2.1
description: |
    This job requires `pytest-cov` and `coverage` to be installed as `pipenv` `devDependences` and assumes
    you have a `.coveragerc` in the working directory.
orbs:
    utils: arrai/utils@1.8.0
jobs:
    pytest:
        parameters:
            wd:
                description: "Working Directory - where tests should be run in the repo (no trailing slash)."
                type: string
                default: .
            executor:
                type: executor
            resource_class:
                type: string
                default: medium
            presetup:
                description: "Any additional pre-setup steps."
                type: steps
                default:
                    - run:
                          command: sudo apt-get install rsync pipenv
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz). It occurs before pipenv install. If you passed a wd, you need to cd to it if desired."
                type: steps
                default: []
            config:
                description: "Any additional configuration steps (e.g., cp .env.circleci .env.local). It occurs after pipenv install. If you passed a wd, you need to cd to it if desired."
                type: steps
                default: []
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        environment:
            PIPENV_DONT_LOAD_ENV: 1
        steps:
            - checkout
            - utils/add_ssh_config
            - steps: <<parameters.presetup>>
            - steps: <<parameters.setup>>
            - utils/make_status_shield:
                  status: running
                  color: lightblue
            - utils/rsync_file:
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/${CIRCLE_JOB}.svg
                  host: docs
            - restore_cache: # ensure this step occurs *before* installing dependencies
                  keys:
                      - pipenv-{{ arch }}-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - run:
                  name: Setup pipenv environment.
                  command: |
                      cd <<parameters.wd>>
                      pipenv install --dev | cat; test ${PIPESTATUS[0]} -eq 0
                      echo "import coverage; coverage.process_startup()" > `pipenv run python -c "import sys; print([x for x in sys.path if x.find('.local/share/virtualenvs') != -1 and x.find('site-packages') != -1][0] + '/coverage-all-the-things.pth')"`
            - save_cache:
                  paths:
                      - ~/.local/share/virtualenvs/
                  key: pipenv-{{ arch }}-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - steps: <<parameters.config>>
            - run:
                  name: Run tests
                  command: |
                      cd <<parameters.wd>>
                      pipenv run pytest --cov --cov-config=.coveragerc
            - run:
                  name: Build coverage reports
                  command: |
                      cd <<parameters.wd>>
                      pipenv run coverage combine && exit 0
                      pipenv run coverage html
                      pipenv run coverage report | grep -oP '^TOTAL.*\d' | awk '{print $NF}' >> /tmp/.coveragep
                  when: always
            - utils/rsync_folder:
                  when: always
                  folder: htmlcov/
                  remote_folder: ${CIRCLE_BRANCH}/htmlcov_${CIRCLE_JOB}
                  host: docs
            - utils/make_coverage_shield:
                  when: always
                  link: https://${DOCS_HOST}/${CIRCLE_PROJECT_REPONAME}/artifacts/${CIRCLE_BRANCH}/htmlcov_${CIRCLE_JOB}/
            - utils/rsync_file:
                  when: always
                  file: /tmp/coverage.svg
                  remote_file: ${CIRCLE_BRANCH}/${CIRCLE_JOB}.coverage.svg
                  host: docs
            - utils/make_status_shield:
                  when: on_success
                  status: passed
                  color: brightgreen
                  file: ~/status.svg
            - utils/make_status_shield:
                  when: on_fail
                  status: failed
                  color: red
                  file: ~/status.svg
            - utils/rsync_file:
                  when: always
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/${CIRCLE_JOB}.svg
                  host: docs
