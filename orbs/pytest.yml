version: 2.1
description: |
    This job requires `pytest-cov` and `coverage` to be installed as `devDependences`.
    Configure pytest and coverage via pyproject.toml.
orbs:
    utils: arrai/utils@1.21.1
executors:
    python313:
        docker:
            - image: cimg/python:3.13
    python312:
        docker:
            - image: cimg/python:3.12
    python311:
        docker:
            - image: cimg/python:3.11
    python310:
        docker:
            - image: cimg/python:3.10
    python39:
        docker:
            - image: cimg/python:3.9
jobs:
    pytest:
        parameters:
            wd:
                description: "Working Directory - where tests should be run in the repo (no trailing slash)."
                type: string
                default: .
            executor:
                type: executor
                default: python39
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: medium
            env_type:
                description: "Python environment type."
                type: enum
                default: "pipenv"
                enum: [pipenv, uv]
            presetup:
                description: "Any additional pre-setup steps."
                type: steps
                default: []
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz). It occurs before pipenv install. If you passed a wd, you need to cd to it if desired."
                type: steps
                default: []
            config:
                description: "Any additional configuration steps (e.g., cp .env.circleci .env.local). It occurs after pipenv install. If you passed a wd, you need to cd to it if desired."
                type: steps
                default: []
            pytest_args:
                description: "Any additional arguments to pass to pytest."
                type: string
                default: "--cov"
            cache_key_version:
                description: "a string that can be changed to bust the python environment cache."
                type: string
                default: "1"
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: true
        environment:
            PIPENV_DONT_LOAD_ENV: 1
            UV_LOCKED: 1
            UV_NO_SYNC: 1
        steps:
            - checkout
            - utils/add_ssh_config
            - steps: <<parameters.presetup>>
            - steps: <<parameters.setup>>
            - utils/make_status_shield:
                  status: running
                  color: lightblue
            - utils/rsync_file:
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/${CIRCLE_JOB}.svg
                  host: docs
            - run:
                  name: Keep track of the python version.
                  command: |
                      <<parameters.env_type>> run python --version > /tmp/python.version
                      if [ "pipenv" = <<parameters.env_type>> ]; then
                          cp Pipfile.lock /tmp/env.lock
                      elif [ "uv" = <<parameters.env_type>> ]; then
                          cp uv.lock /tmp/env.lock
                      fi
            - restore_cache: # ensure this step occurs *before* installing dependencies
                  keys:
                      - <<parameters.env_type>>-{{ checksum "/etc/os-release" }}-{{ checksum "/tmp/python.version" }}-<<parameters.cache_key_version>>-{{ .Branch }}-{{ checksum "/tmp/env.lock" }}
                      - <<parameters.env_type>>-{{ checksum "/etc/os-release" }}-{{ checksum "/tmp/python.version" }}-<<parameters.cache_key_version>>-{{ .Branch }}
                      - <<parameters.env_type>>-{{ checksum "/etc/os-release" }}-{{ checksum "/tmp/python.version" }}-<<parameters.cache_key_version>>-main
                      - <<parameters.env_type>>-{{ checksum "/etc/os-release" }}-{{ checksum "/tmp/python.version" }}-<<parameters.cache_key_version>>-main
            - run:
                  name: Setup python environment.
                  command: |
                      cd <<parameters.wd>>
                      if [ <<parameters.env_type>> = "pipenv" ]; then
                          pipenv clean
                          pipenv sync --dev | cat; test ${PIPESTATUS[0]} -eq 0
                      elif [ <<parameters.env_type>> = "uv" ]; then
                          uv sync --dev | cat; test ${PIPESTATUS[0]} -eq 0
                      fi
                      export PYTEST_VENV=$(<<parameters.env_type>> run python -c "import sys; print(sys.prefix)")
                      export PYTEST_COVERAGE_PTH=$(<<parameters.env_type>> run python -c "import sys; import os; print([x for x in sys.path if x.find(os.environ['PYTEST_VENV']) != -1 and x.find('site-packages') != -1][0] + '/coverage-all-the-things.pth')")
                      echo "import coverage; coverage.process_startup()" > "${PYTEST_COVERAGE_PTH}"
            - when:
                  condition:
                      equal: ["pipenv", <<parameters.env_type>>]
                  steps:
                      - save_cache:
                            paths:
                                - ~/.local/share/virtualenvs/
                            key: <<parameters.env_type>>-{{ checksum "/etc/os-release" }}-{{ checksum "/tmp/python.version" }}-<<parameters.cache_key_version>>-{{ .Branch }}-{{ checksum "/tmp/env.lock" }}
            - when:
                  condition:
                      equal: ["uv", <<parameters.env_type>>]
                  steps:
                      - save_cache:
                            paths:
                                - ~/.cache/uv/
                            key: <<parameters.env_type>>-{{ checksum "/etc/os-release" }}-{{ checksum "/tmp/python.version" }}-<<parameters.cache_key_version>>-{{ .Branch }}-{{ checksum "/tmp/env.lock" }}
            - steps: <<parameters.config>>
            - run:
                  name: Run tests
                  command: |
                      cd <<parameters.wd>>
                      <<parameters.env_type>> run pytest <<parameters.pytest_args>>
            - run:
                  name: Build coverage reports
                  command: |
                      cd <<parameters.wd>>
                      <<parameters.env_type>> run coverage combine && exit 0
                      <<parameters.env_type>> run coverage html
                      <<parameters.env_type>> run coverage report | grep -oP '^TOTAL.*\d' | awk '{print $NF}' >> /tmp/.coveragep
                  when: always
            - utils/rsync_folder:
                  when: always
                  folder: htmlcov/
                  remote_folder: ${CIRCLE_BRANCH}/htmlcov_${CIRCLE_JOB}
                  host: docs
            - utils/make_coverage_shield:
                  when: always
                  link: https://${DOCS_HOST}/${CIRCLE_PROJECT_REPONAME}/artifacts/${CIRCLE_BRANCH}/htmlcov_${CIRCLE_JOB}/
            - utils/rsync_file:
                  when: always
                  file: /tmp/coverage.svg
                  remote_file: ${CIRCLE_BRANCH}/${CIRCLE_JOB}.coverage.svg
                  host: docs
            - utils/make_status_shield:
                  when: on_success
                  status: passed
                  color: brightgreen
                  file: ~/status.svg
            - utils/make_status_shield:
                  when: on_fail
                  status: failed
                  color: red
                  file: ~/status.svg
            - utils/rsync_file:
                  when: always
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/${CIRCLE_JOB}.svg
                  host: docs
