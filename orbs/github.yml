version: 2.1
executors:
    base:
        docker:
            - image: cimg/base:current
commands:
    post-status:
        description: post status to github
        # samsalisbury/github-status - github-status/post-status
        # customized to have a configurable repo and commit
        parameters:
            when:
                type: string
                enum:
                    - always
                    - on_success
                    - on_fail
            state:
                type: string
            description:
                type: string
                default: $GITHUB_STATUS_DESCRIPTION
            context:
                type: string
                default: $GITHUB_STATUS_CONTEXT
            target_repo:
                type: string
                default: $CIRCLE_CI_PROJECT_USERNAME/$CIRCLE_CI_PROJECT_REPONAME
            target_commit_or_tag:
                type: string
                default: $CIRCLE_SHA1
        steps:
            - run:
                  when: <<parameters.when>>
                  name: "GitHub Status: <<parameters.state>>"
                  command: |
                      set -euo pipefail
                      CONTEXT="<<parameters.context>>"
                      DESCRIPTION="<<parameters.description>>"
                      [ -n "$CONTEXT" ] || CONTEXT="circleci/$CIRCLE_JOB"
                      [ -n "$DESCRIPTION" ] || DESCRIPTION="$CONTEXT"
                      # Export the latest values for CONTEXT and DESCRIPTION so later calls
                      # do not need to set them explicitly again.
                      echo "export GITHUB_STATUS_CONTEXT='$CONTEXT'" >> $BASH_ENV
                      echo "export GITHUB_STATUS_DESCRIPTION='$DESCRIPTION'" >> $BASH_ENV
                      # Compose our URL and auth pieces.
                      API=https://api.github.com
                      USER=arrai-innovations
                      REPO=<<parameters.target_repo>>
                      SHA=<<parameters.target_commit_or_tag>>
                      AUTH=$GITHUB_STATUS_USER:$GITHUB_STATUS_TOKEN
                      URL=$API/repos/$USER/$REPO/statuses/$SHA
                      # Compose the body.
                      BODY='
                          {
                              "state": "<<parameters.state>>",
                              "target_url": "$CIRCLE_BUILD_URL",
                              "description": "<<parameters.state>>: '"$DESCRIPTION"'",
                              "context": "'"$CONTEXT"'"
                          }
                      '
                      # Post the status (use echo-pipe not \<<< for greater shell compat).
                      echo $BODY | curl -u $AUTH -XPOST -d@- $URL
    pending:
        description: post pending status to github
        # samsalisbury/github-status - github-status/pending
        # customized to use customized post-status
        parameters:
            description:
                type: string
                default: $GITHUB_STATUS_DESCRIPTION
            context:
                type: string
                default: $GITHUB_STATUS_CONTEXT
            target_repo:
                type: string
                default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
            target_commit_or_tag:
                type: string
                default: $CIRCLE_SHA1
        steps:
            - post-status:
                  when: on_success
                  state: pending
                  description: <<parameters.description>>
                  context: <<parameters.context>>
                  target_repo: << parameters.target_repo >>
                  target_commit_or_tag: << parameters.target_commit_or_tag >>
    success_or_fail:
        description: post success or error status to github
        # samsalisbury/github-status - github-status/report
        # customized to use customized post-status and we don't need a report_failed_only
        parameters:
            description:
                type: string
                default: $GITHUB_STATUS_DESCRIPTION
            context:
                type: string
                default: $GITHUB_STATUS_CONTEXT
            target_repo:
                type: string
                default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
            target_commit_or_tag:
                type: string
                default: $CIRCLE_SHA1
        steps:
            - post-status:
                  when: on_success
                  state: success
                  description: <<parameters.description>>
                  context: <<parameters.context>>
                  target_repo: << parameters.target_repo >>
                  target_commit_or_tag: << parameters.target_commit_or_tag >>
            - post-status:
                  when: on_fail
                  state: failure
                  description: <<parameters.description>>
                  context: <<parameters.context>>
                  target_repo: << parameters.target_repo >>
                  target_commit_or_tag: << parameters.target_commit_or_tag >>
jobs:
    create_release:
        parameters:
            executor:
                description: "The executor to use for the job."
                type: executor
                default: base
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: small
            draft:
                description: "Save the release as a draft instead of publishing it."
                type: boolean
                default: false
            files:
                description: "Files to upload as part of the release (e.g. ./dist/*.zip)"
                type: string
                default: ""
            generate_notes:
                description: "Automatically generate title and notes for the release."
                type: boolean
                default: true
            notes_file:
                description: "Read release notes from file."
                type: string
                default: ""
            prerelease:
                description: "Mark the release as a prerelease."
                type: boolean
                default: false
            target:
                description: "Target branch or full commit SHA."
                type: string
                default: ${CIRCLE_TAG}
            title:
                description: "Release title."
                type: string
                default: ${CIRCLE_TAG}
            token:
                description: "GitHub Token"
                type: string
                default: ${GITHUB_TOKEN}
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        steps:
            - checkout
            - restore_cache:
                  keys:
                      - build-{{ arch }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
            - run:
                  name: Install GitHub CLI Tools
                  command: |
                      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
                      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
                      sudo apt update
                      sudo apt install gh
            - run:
                  name: Create Release
                  shell: /bin/bash
                  command: |
                      export GH_TOKEN="<<parameters.token>>"
                      if [ "<<parameters.draft>>" = "true" ]; then
                          set -- "$@" --draft
                      fi
                      if [ "<<parameters.prerelease>>" = "true" ]; then
                          set -- "$@" --prerelease
                      fi
                      if [ -n "<<parameters.notes_file>>" ] && [ -f "<<parameters.notes_file>>" ] && [ "<<parameters.generate_notes>>" = "false" ]; then
                          set -- "$@" --notes-file "<<parameters.notes_file>>"
                      fi
                      if [ "<<parameters.generate_notes>>" == "true" ]; then
                          set -- "$@" --generate-notes
                      fi
                      if [ -n "<<parameters.title>>" ]; then
                          set -- "$@" --title "<<parameters.title>>"
                      fi
                      if [ -n "<<parameters.files>>" ]; then
                          set -- "$@" <<parameters.files>>
                      fi
                      gh release create "<<parameters.target>>" "$@"
