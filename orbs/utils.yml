version: 2.1
commands:
    send_email:
        description: "Send e-mail message using the mailgun API."
        parameters:
            from:
                description: "E-mail address for the From: header."
                type: string
                default: "CircleCI <circleci@${MAILGUN_DOMAIN}>"
            to:
                description: "E-mail address for the To: header."
                type: string
            subject:
                description: "Message subject."
                type: string
            html:
                description: "Body of the message, in HTML format."
                type: string
            key:
                description: "Your mailgun API key."
                type: string
                default: ${MAILGUN_API_KEY}
            domain:
                description: "Your mailgun domain."
                type: string
                default: ${MAILGUN_DOMAIN}
            when:
                type: enum
                enum: ["always", "on_success", "on_fail"]
                default: on_success
        steps:
            - run:
                  name: "Send e-mail."
                  command: |
                      curl --silent \
                           --user "api:<<parameters.key>>" https://api.mailgun.net/v3/<<parameters.domain>>/messages \
                           --form from="<<parameters.from>>" \
                           --form to="<<parameters.to>>" \
                           --form subject="<<parameters.subject>>" \
                           --form html="<<parameters.html>>"
                  when: <<parameters.when>>
    add_maxmind_config:
        description: "Configure GeoIP.conf with a valid account id and license key."
        parameters:
            account:
                description: "The id of the Maxmind account."
                type: string
                default: ${MAXMIND_ID}
            licence:
                description: "The license key to use to fetch the GeoIP2 Lite databases."
                type: string
                default: ${MAXMIND_KEY}
        steps:
            - run:
                  name: "Configure GeoIP"
                  command: |
                      if [ -e /etc/GeoIP.conf ]; then
                          sudo sed -i -e "s/^AccountID.*/AccountID $MAXMIND_ID/" -e "s/^LicenseKey.*/LicenseKey $MAXMIND_KEY/" /etc/GeoIP.conf
                      fi
                      if [ -e /usr/local/etc/GeoIP.conf ]; then
                          sudo sed -i -e "s/^AccountID.*/AccountID $MAXMIND_ID/" -e "s/^LicenseKey.*/LicenseKey $MAXMIND_KEY/" /usr/local/etc/GeoIP.conf
                      fi
    add_ssh_config:
        description: "Update ~/.ssh/config and ~/.ssh/known_hosts with server host keys or certificate authority details."
        parameters:
            host:
                description: "The name of the entry in ~/.ssh/config to use as a short-hand in SSH commands."
                type: string
                default: docs
            hostname:
                description: "The host name or IP address of the remote SSH server."
                type: string
                default: ${DOCS_HOST}
            port:
                description: "The TCP port the remote SSH server is listening on."
                type: string
                default: ${DOCS_PORT}
            user:
                description: "The user name to present to the remote SSH server."
                type: string
                default: ${DOCS_USER}
            ca:
                description: "Type and public key data of the CA that signed the server's host key; e.g. ed25519 AABBCCDD..."
                type: string
                default: ${SSH_CA}
            hostkeyalgorithms:
                description: "List of preferred host key algorithms."
                type: string
                default: "ssh-ed25519-cert-v01@openssh.com,ssh-ed25519"
            when:
                type: enum
                enum: ["always", "on_success", "on_fail"]
                default: always
        steps:
            - run:
                  name: "Configure SSH Client"
                  command: |
                      touch ~/.ssh/config
                      if [ -n "<<parameters.hostname>>" ]; then
                          if [ -n "<<parameters.ca>>" ]; then
                              echo "@cert-authority <<parameters.hostname>> <<parameters.ca>>" >> ~/.ssh/known_hosts
                          else
                              ssh-keyscan -p <<parameters.port>> <<parameters.hostname>> >> ~/.ssh/known_hosts
                          fi
                          echo -e "Host <<parameters.host>>\n\tHostName <<parameters.hostname>>\n\tPort <<parameters.port>>\n\tUser <<parameters.user>>\n\tHostKeyAlgorithms <<parameters.hostkeyalgorithms>>" >> ~/.ssh/config
                      fi
                  when: <<parameters.when>>
    make_status_shield:
        description: "Fetch status shield from shields.io."
        parameters:
            file:
                description: "Output file name."
                type: string
                default: "~/status.svg"
            status:
                description: "Status to set on the shield."
                type: string
            color:
                description: "Color of the shield."
                type: string
            style:
                description: "Shield style."
                type: enum
                enum:
                    [
                        "plastic",
                        "flat",
                        "flat-square",
                        "for-the-badge",
                        "popout",
                        "popout-square",
                        "social",
                    ]
                default: for-the-badge
            label:
                description: "The text to use for the shield label."
                type: string
                default: ${CIRCLE_JOB}
            logo:
                description: "The logo to use on the shield."
                type: string
                default: circleci
            preserve:
                description: "Prevent any existing shield of the same name from being overwritten."
                type: boolean
                default: false
            when:
                type: enum
                enum: ["always", "on_success", "on_fail"]
                default: on_success
        steps:
            - run:
                  name: Make status shield (<<parameters.status>>)
                  command: |
                      LABEL=$(echo -n "<<parameters.label>>" | sed -e 's/ /_/g' -e 's/-/--/g')
                      <<# parameters.preserve>>[ ! -f <<parameters.file>> ] && <</ parameters.preserve>> curl -sS -o <<parameters.file>> "https://img.shields.io/badge/${LABEL}-<<parameters.status>>-<<parameters.color>>.svg?logo=<<parameters.logo>>&logoColor=white&style=<<parameters.style>>&link=${CIRCLE_BUILD_URL}" || :
                  when: <<parameters.when>>
    make_coverage_shield:
        description: "Fetch coverage shield from shields.io."
        parameters:
            file:
                description: "Output file name."
                type: string
                default: "/tmp/coverage.svg"
            coveragep:
                description: "coverage percent output file name."
                type: string
                default: "/tmp/.coveragep"
            style:
                description: "Shield style."
                type: enum
                enum:
                    [
                        "plastic",
                        "flat",
                        "flat-square",
                        "for-the-badge",
                        "social",
                    ]
                default: for-the-badge
            logo:
                description: "The logo to use on the shield."
                type: string
                default: codecov
            link:
                description: "The link embedded in the shield."
                type: string
            when:
                type: enum
                enum: ["always", "on_success", "on_fail"]
                default: on_success
        steps:
            - run:
                  name: Make coverage shield
                  command: |
                      COVERAGE_PERCENTAGE=$(cat <<parameters.coveragep>> 2> /dev/null || echo 0)
                      declare -A COLORS; declare -a VALUES;
                      COLORS=(["95"]="brightgreen" ["90"]="green" ["75"]="yellowgreen" ["60"]="yellow" ["40"]="orange" ["0"]="red")
                      VALUES=("95" "90" "75" "60" "40" "0");
                      for KEY in "${VALUES[@]}"; do if [ "${COVERAGE_PERCENTAGE}" -ge "$KEY" ]; then COVERAGE_COLOR=${COLORS[$KEY]}; break; fi; done;
                      curl --get --data-urlencode "link=<<parameters.link>>" -sS -o <<parameters.file>> "https://img.shields.io/badge/Coverage-${COVERAGE_PERCENTAGE}%25-${COVERAGE_COLOR}.svg?logo=<<parameters.logo>>&logoColor=white&style=<<parameters.style>>"
                  when: <<parameters.when>>
    rsync_install:
        description: "Install rsync on the host."
        parameters:
            requires_sudo:
                type: boolean
                default: true
            when:
                type: enum
                enum: ["always", "on_success", "on_fail"]
                default: on_success
        steps:
            - run:
                  name: install rsync
                  when: <<parameters.when>>
                  command: |
                      if ! [ -x "$(command -v rsync)" ]; then
                          if [ -f /usr/bin/yum ]; then
                              <<# parameters.requires_sudo>>sudo<</ parameters.requires_sudo>> yum -y install rsync
                          elif [ -f /usr/bin/apt-get ]; then
                              <<# parameters.requires_sudo>>sudo<</ parameters.requires_sudo>> apt-get -y update
                              <<# parameters.requires_sudo>>sudo<</ parameters.requires_sudo>> apt-get -y install rsync
                          fi
                      fi
    rsync_file:
        description: "Copy a single file to a remote destination via rsync."
        parameters:
            file:
                description: "The local file(path) to rsync."
                type: string
            remote_file:
                description: "The name of the remote file."
                type: string
            host:
                description: "The host name of the ssh/rsync server."
                type: string
            when:
                type: enum
                enum: ["always", "on_success", "on_fail"]
                default: on_success
            requires_sudo:
                type: boolean
                default: true
        steps:
            - rsync_install:
                  requires_sudo: <<parameters.requires_sudo>>
                  when: <<parameters.when>>
            - run:
                  name: rsync file (<<parameters.file>> -> <<parameters.remote_file>>)
                  command: |
                      if [ -f <<parameters.file>> ] && [ -f ~/.ssh/config ]; then
                          set +e
                          MATCH=$(grep -Pc "^Host <<parameters.host>>$" ~/.ssh/config)
                          if [ "${MATCH}" -gt "0" ]; then
                              LANG=en_US.UTF-8
                              REMOTE_FILE=$(printf %q "<<parameters.remote_file>>")
                              set -x
                              rsync -t -e "ssh" <<parameters.file>> "<<parameters.host>>:/${REMOTE_FILE}"
                          fi
                      fi
                  when: <<parameters.when>>
    rsync_folder:
        description: "Recursively copy a folder to a remote destination via rsync."
        parameters:
            folder:
                description: "The local folder(path) to rsync."
                type: string
            remote_folder:
                description: "The name of the remote folder."
                type: string
            host:
                description: "The host name of the ssh/rsync server."
                type: string
            delete:
                description: "Delete extraneous files from the destination."
                type: boolean
                default: true
            when:
                type: enum
                enum: ["always", "on_success", "on_fail"]
                default: on_success
            requires_sudo:
                type: boolean
                default: true
        steps:
            - rsync_install:
                  requires_sudo: <<parameters.requires_sudo>>
                  when: <<parameters.when>>
            - run:
                  name: rsync folder (<<parameters.folder>> -> <<parameters.remote_folder>>)
                  command: |
                      if [ -d <<parameters.folder>> ] && [ -f ~/.ssh/config ]; then
                          set +e
                          MATCH=$(grep -Pc "^Host <<parameters.host>>$" ~/.ssh/config)
                          if [ "${MATCH}" -gt "0" ]; then
                              LANG=en_US.UTF-8
                              REMOTE_FOLDER=$(printf %q "<<parameters.remote_folder>>")
                              set -x
                              rsync <<# parameters.delete>>--delete<</ parameters.delete>> -r -l -t -e "ssh" <<parameters.folder>> "<<parameters.host>>:/${REMOTE_FOLDER}"
                          fi
                      fi
                  when: <<parameters.when>>
    add_npm_config:
        description: "Add a ~/.npmrc with the appropriate authentication token."
        parameters:
            token:
                description: "The authentication token."
                type: string
                default: ${NPM_TOKEN}
            registry:
                description: "The npm registry."
                type: string
                default: "registry.npmjs.org"
        steps:
            - run:
                  name: "Inject NPM_TOKEN into config"
                  command: |
                      echo "//<<parameters.registry>>/:_authToken=<<parameters.token>>" > ~/.npmrc
    upgrade_npm:
        description: "Install / Upgrade npm"
        parameters:
            version:
                description: "NPM version to use"
                type: string
                default: "latest"
        steps:
            - run:
                  name: "Install/Update npm"
                  command: |
                      if [ "$(which npm)" = "/usr/local/bin/npm" ]; then
                          sudo npm install -g npm@<<parameters.version>>
                      else
                          npm install -g npm@<<parameters.version>>
                      fi
    install_dockerize:
        description: "Install dockerize"
        parameters:
            version:
                description: "Version of dockerize to install."
                type: string
                default: "v0.8.0"
        steps:
            - run:
                  name: Install dockerize
                  command: |
                      wget https://github.com/jwilder/dockerize/releases/download/<<parameters.version>>/dockerize-linux-amd64-<<parameters.version>>.tar.gz
                      sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-<<parameters.version>>.tar.gz
                      rm dockerize-linux-amd64-<<parameters.version>>.tar.gz
    require_changelog_between_tags:
        description: "Make sure the changelog was updated between tags."
        parameters:
            changelog:
                description: "Path to the changelog."
                type: string
                default: "CHANGELOG.md"
        steps:
            - run:
                  name: "Make sure the changelog was updated."
                  command: |
                      if ! [ -f <<parameters.changelog>> ]; then
                          echo "No changelog found at <<parameters.changelog>>. Skipping check."
                          exit 0
                      fi
                      PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${CIRCLE_TAG}^" 2> /dev/null || true)
                      if [ -z "${PREVIOUS_TAG}" ]; then
                          echo "No previous tag found. Nothing to compare against."
                          exit 0
                      fi
                      HAS_COMMIT=$(git diff "${PREVIOUS_TAG}..${CIRCLE_TAG}" --name-only | grep -F <<parameters.changelog>>)
                      if [ -z "${HAS_COMMIT}" ]; then
                          echo "<<parameters.changelog>> has not been updated for this tag."
                          exit 1
                      fi
