version: 2.1
orbs:
    utils: arrai/utils@1.21.1
executors:
    python313:
        docker:
            - image: cimg/python:3.13-node
    python312:
        docker:
            - image: cimg/python:3.12-node
    python311:
        docker:
            - image: cimg/python:3.11-node
    python310:
        docker:
            - image: cimg/python:3.10-node
    python39:
        docker:
            - image: cimg/python:3.9-node
    node-current:
        docker:
            - image: cimg/node:current
    node-lts:
        docker:
            - image: cimg/node:lts
aliases:
    common_node_parameters: &common_node_parameters
        hooks:
            description: List of linters to run
            type: string
        create_badges:
            description: Create status badges
            type: boolean
            default: true
    common_node_steps: &common_node_steps
        - checkout
        - run_node_linters:
              hooks: <<parameters.hooks>>
              create_badges: <<parameters.create_badges>>
    common_lint_parameters: &common_lint_parameters
        hooks:
            description: List of linter hooks to run
            type: string
        hook_manager:
            description: Hook manager to use for running linters
            type: enum
            enum: [precommit, lefthook]
            default: precommit
        create_badges:
            description: Create status badges
            type: boolean
            default: true
        use_cache:
            description: Save and restore the pre-commit cache
            type: boolean
            default: true
        cache_key_version:
            description: Version of the pre-commit cache key
            type: string
            default: "1"
    common_lint_steps: &common_lint_steps
        - checkout
        - run_python_linters:
              hooks: <<parameters.hooks>>
              hook_manager: <<parameters.hook_manager>>
              create_badges: <<parameters.create_badges>>
              use_cache: <<parameters.use_cache>>
              cache_key_version: <<parameters.cache_key_version>>
commands:
    run_node_linters:
        description: Run linters using npx
        parameters:
            <<: *common_node_parameters
        steps:
            - utils/add_npm_config
            - run:
                  name: Install node packages
                  when: always
                  command: npm install --include=dev
            - when:
                  condition: <<parameters.create_badges>>
                  steps:
                      - utils/add_ssh_config
            - when:
                  condition:
                      matches:
                          pattern: '.*\bprettier\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run prettier
                            command: npx prettier -c .
            - when:
                  condition:
                      matches:
                          pattern: '.*\beslint\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run eslint
                            when: always
                            command: |
                                set +e
                                npx eslint --color . | tee ~/eslint.log
                                if [ $? -ne 0 ]; then
                                    if [ -s ~/eslint.log ]; then
                                        echo '{"color": "orange", "status": "warnings"}' > ~/eslint_status.json
                                    else
                                        echo '{"color": "red", "status": "errors"}' > ~/eslint_status.json
                                    fi
                                    exit 1
                                fi
                      - when:
                            condition: <<parameters.create_badges>>
                            steps:
                                - utils/make_status_shield:
                                      config: ~/eslint_status.json
                                      logo: eslint
                                      file: ~/eslint.svg
                                      when: always
                                - utils/rsync_file:
                                      when: always
                                      file: ~/eslint.svg
                                      remote_file: $CIRCLE_BRANCH/eslint.svg
                                      host: docs
            - when:
                  condition:
                      matches:
                          pattern: '.*\bbiome\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run biome
                            when: always
                            command: |
                                set +e
                                npx @biomejs/biome check . | tee ~/biome.log
                                if [ $? -ne 0 ]; then
                                    if grep -q "Found .* errors" ~/biome.log; then
                                        echo '{"color": "red", "status": "errors"}' > ~/biome_status.json
                                    elif grep -q "Found .* warnings" ~/biome.log; then
                                        echo '{"color": "orange", "status": "warnings"}' > ~/biome_status.json
                                    else
                                        echo '{"color": "red", "status": "errors"}' > ~/biome_status.json
                                    fi
                                    exit 1
                                else
                                    echo '{"color": "green", "status": "ok"}' > ~/biome_status.json
                                fi
                      - when:
                            condition: <<parameters.create_badges>>
                            steps:
                                - utils/make_status_shield:
                                      config: ~/biome_status.json
                                      logo: biome
                                      file: ~/biome.svg
                                      when: always
                                - utils/rsync_file:
                                      when: always
                                      file: ~/biome.svg
                                      remote_file: $CIRCLE_BRANCH/biome.svg
                                      host: docs

    run_python_linters:
        description: Run linters using hook manager (pre-commit or lefthook)
        parameters:
            <<: *common_lint_parameters
        steps:
            - run:
                  name: Install pre-commit
                  when: always
                  command: |
                      if ! [ -x "$(command -v uv)" ]; then
                          curl -LsSf https://astral.sh/uv/install.sh | bash
                      else
                          uv self update
                      fi
                      uv tool install pre-commit --with pre-commit-uv
            - when:
                  condition: <<parameters.use_cache>>
                  steps:
                      - run:
                            name: Generate cache key
                            when: always
                            command: |
                                python --version > /tmp/cache_key.txt
                                cat .pre-commit-config.yaml >> /tmp/cache_key.txt
                      - restore_cache:
                            key: v<<parameters.cache_key_version>>-pre-commit-cache-{{ checksum "/tmp/cache_key.txt" }}
            - when:
                  condition: <<parameters.create_badges>>
                  steps:
                      - utils/add_ssh_config
            - when:
                  condition:
                      and:
                          - equal: [precommit, <<parameters.hook_manager>>]
                          - or:
                                - matches:
                                      pattern: '.*\bprettier\b.*'
                                      value: <<parameters.hooks>>
                                - matches:
                                      pattern: '.*\beslint\b.*'
                                      value: <<parameters.hooks>>
                  steps:
                      - utils/add_npm_config
                      - run:
                            name: Install node packages
                            when: always
                            command: npm install --include dev
            - when:
                  condition:
                      matches:
                          pattern: '.*\bprettier\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run prettier
                            when: always
                            command: pre-commit run prettier --all-files
            - when:
                  condition:
                      matches:
                          pattern: '.*\bblack\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run black
                            when: always
                            command: pre-commit run black --all-files
            - when:
                  condition:
                      matches:
                          pattern: '.*\beslint\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run eslint
                            when: always
                            command: |
                                set +e
                                pre-commit run eslint --all-files
                                if [ $? -ne 0 ]; then
                                    echo '{"color": "red", "status": "errors"}' > ~/eslint_status.json
                                    exit 1
                                fi
                      - when:
                            condition: <<parameters.create_badges>>
                            steps:
                                - utils/make_status_shield:
                                      config: ~/eslint_status.json
                                      label: eslint
                                      logo: eslint
                                      file: ~/eslint.svg
                                      when: always
                                - utils/rsync_file:
                                      when: always
                                      file: ~/eslint.svg
                                      remote_file: $CIRCLE_BRANCH/eslint.svg
                                      host: docs
            - when:
                  condition:
                      matches:
                          pattern: '.*\bmd-toc\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run md-toc
                            when: always
                            command: pre-commit run md-toc --all-files
            - when:
                  condition:
                      matches:
                          pattern: '.*\bflake8\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run flake8
                            when: always
                            command: |
                                set +e
                                pre-commit run flake8 --all-files
                                if [ $? -ne 0 ]; then
                                    echo '{"color": "red", "status": "errors"}' > ~/flake8_status.json
                                    exit 1
                                fi
            - when:
                  condition:
                      matches:
                          pattern: '.*\bpyproject-flake8\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run flake8
                            when: always
                            command: |
                                set +e
                                pre-commit run pyproject-flake8 --all-files
                                if [ $? -ne 0 ]; then
                                    echo '{"color": "red", "status": "errors"}' > ~/flake8_status.json
                                    exit 1
                                fi
            - when:
                  condition:
                      and:
                          - equal: [true, <<parameters.create_badges>>]
                          - or:
                                - matches:
                                      pattern: '.*\bflake8\b.*'
                                      value: <<parameters.hooks>>
                                - matches:
                                      pattern: '.*\bpyproject-flake8\b.*'
                                      value: <<parameters.hooks>>
                  steps:
                      - utils/make_status_shield:
                            config: ~/flake8_status.json
                            label: flake8
                            logo: python
                            file: ~/flake8.svg
                            when: always
                      - utils/rsync_file:
                            when: always
                            file: ~/flake8.svg
                            remote_file: $CIRCLE_BRANCH/flake8.svg
                            host: docs
            - when:
                  condition:
                      matches:
                          pattern: '.*\bruff\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run ruff lint
                            when: always
                            command: |
                                set +e
                                pre-commit run ruff --all-files
                                if [ $? -ne 0 ]; then
                                    echo '{"color": "red", "status": "errors"}' > ~/ruff_status.json
                                    exit 1
                                fi
                      - run:
                            name: Run ruff formatter
                            when: always
                            command: |
                                set +e
                                pre-commit run ruff-format --all-files
                                if [ $? -ne 0 ]; then
                                    echo '{"color": "red", "status": "errors"}' > ~/ruff_status.json
                                    exit 1
                                fi
                      - when:
                            condition: <<parameters.create_badges>>
                            steps:
                                - utils/make_status_shield:
                                      config: ~/ruff_status.json
                                      label: ruff
                                      logo: ruff
                                      file: ~/ruff.svg
                                      when: always
                                - utils/rsync_file:
                                      when: always
                                      file: ~/ruff.svg
                                      remote_file: $CIRCLE_BRANCH/ruff.svg
                                      host: docs
            - when:
                  condition:
                      matches:
                          pattern: '.*\bbiome\b.*'
                          value: <<parameters.hooks>>
                  steps:
                      - run:
                            name: Run biome
                            when: always
                            command: |
                                set +e
                                pre-commit run biome --all-files | tee ~/biome.log
                                if [ $? -ne 0 ]; then
                                    if grep -q "Found .* errors" ~/biome.log; then
                                        echo '{"color": "red", "status": "errors"}' > ~/biome_status.json
                                    elif grep -q "Found .* warnings" ~/biome.log; then
                                        echo '{"color": "orange", "status": "warnings"}' > ~/biome_status.json
                                    else
                                        echo '{"color": "red", "status": "errors"}' > ~/biome_status.json
                                    fi
                                    exit 1
                                else
                                    echo '{"color": "green", "status": "ok"}' > ~/biome_status.json
                                fi
                      - when:
                            condition: <<parameters.create_badges>>
                            steps:
                                - utils/make_status_shield:
                                      config: ~/biome_status.json
                                      label: biome
                                      logo: biome
                                      file: ~/biome.svg
                                      when: always
                                - utils/rsync_file:
                                      when: always
                                      file: ~/biome.svg
                                      remote_file: $CIRCLE_BRANCH/biome.svg
                                      host: docs
            - when:
                  condition:
                      equal: [lefthook, <<parameters.hook_manager>>]
                  steps:
                      - utils/add_npm_config
                      - restore_cache:
                            keys:
                                - v1-npm-deps-{{ checksum "package.json" }}
                                - v1-npm-deps-
                      - run:
                            name: Install node packages
                            when: always
                            command: npm ci
                      - save_cache:
                            key: v1-npm-deps-{{ checksum "package.json" }}
                            paths:
                                - ~/.npm
                      - run:
                            name: Run lefthook hooks
                            when: always
                            command: |
                                set +e
                                npx lefthook run pre-commit | tee ~/lefthook.log
                                if [ $? -ne 0 ]; then
                                    echo '{"color": "red", "status": "errors"}' > ~/lefthook_status.json
                                    exit 1
                                else
                                    echo '{"color": "green", "status": "ok"}' > ~/lefthook_status.json
                                fi
                      - when:
                            condition: <<parameters.create_badges>>
                            steps:
                                - utils/make_status_shield:
                                      config: ~/lefthook_status.json
                                      label: lefthook
                                      logo: lefthook
                                      file: ~/lefthook.svg
                                      when: always
                                - utils/rsync_file:
                                      when: always
                                      file: ~/lefthook.svg
                                      remote_file: $CIRCLE_BRANCH/lefthook.svg
                                      host: docs
            - when:
                  condition: <<parameters.use_cache>>
                  steps:
                      - save_cache:
                            when: always
                            key: v<<parameters.cache_key_version>>-pre-commit-cache-{{ checksum "/tmp/cache_key.txt" }}
                            paths:
                                - ~/.cache/pre-commit
jobs:
    lint_python:
        parameters:
            <<: *common_lint_parameters
            executor:
                description: The executor to use for the job
                type: executor
                default: python312
            resource_class:
                description: The resource class to use for the job
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: small
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: false
        steps: *common_lint_steps
    lint_python_fixed_ip:
        parameters:
            <<: *common_lint_parameters
            executor:
                description: The executor to use for the job
                type: executor
                default: python312
            resource_class:
                description: The resource class to use for the job
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: small
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: true
        steps: *common_lint_steps
    lint_node:
        parameters:
            <<: *common_node_parameters
            executor:
                description: The executor to use for the job
                type: executor
                default: node-lts
            resource_class:
                description: The resource class to use for the job
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: small
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: false
        steps: *common_node_steps
    lint_node_fixed_ip:
        parameters:
            <<: *common_node_parameters
            executor:
                description: The executor to use for the job
                type: executor
                default: node-lts
            resource_class:
                description: The resource class to use for the job
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: small
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: true
        steps: *common_node_steps
