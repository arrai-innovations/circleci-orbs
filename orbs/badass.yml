version: 2.1
orbs:
    utils: arrai/utils@1.16.0
aliases:
    pre_spread_common_parameters: &pre_spread_common_parameters
        wd:
            description: "Where tests should be run in the repo, relative to the repodir (no trailing slash)."
            type: string
            default: ${CIRCLE_PROJECT_REPONAME}
        setup:
            description: "Any additional setup steps to run (e.g., yum install foo-bar-baz)."
            type: steps
            default: []
        config:
            description: "Any additional BMS configuration steps."
            type: steps
            default: []
        executor:
            description: "Execution environment for the test job."
            type: executor
        resource_class:
            description: "The resource class to use for the job."
            type: enum
            enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
        badge_label:
            description: "The label to use for the badge."
            type: string
            default: tests
        meta_job_name:
            description: "The filename to use for the badge."
            type: string
jobs:
    badass:
        parameters:
            repodir:
                description: "Location of the git repo (no trailing slash)."
                type: string
                default: ~/project
            wd:
                description: "Where tests should be run in the repo, relative to the repodir (no trailing slash)."
                type: string
                default: ${CIRCLE_PROJECT_REPONAME}
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz)."
                type: steps
                default: []
            config:
                description: "Any additional BMS configuration steps."
                type: steps
                default: []
            executor:
                description: "Execution environment for the test job."
                type: executor
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
            parallel:
                description: "The level of test parallelism."
                type: integer
                default: 4
            badge_label:
                description: "The label to use for the badge."
                type: string
                default: tests
            meta_job_name:
                description: "The filename to use for the badge."
                type: string
            test_script:
                description: "The test script to run (e.g., manage.py test)."
                type: string
                default: manage.py test
            pipenv_python_arg:
                description: "Location or version of the python interpreter to use for pipenv."
                type: string
                default: ""
            pipenv_skip_lock:
                description: "Skip use of the pipenv lock file."
                type: boolean
                default: false
            pip_install_args:
                description: "Any additional arguments to pip install (e.g., -r ./requirements.txt)."
                type: string
                default: ""
            use_pipenv:
                description: "Run commands using pipenv"
                type: boolean
                default: true
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: true
        working_directory: <<parameters.repodir>>
        steps:
            - checkout
            - utils/add_ssh_config
            - utils/make_status_shield:
                  status: running
                  color: lightblue
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
            - steps: <<parameters.setup>>
            - when:
                  condition: <<parameters.use_pipenv>>
                  steps:
                      - setup_pipenv:
                            pipenv_python_arg: <<parameters.pipenv_python_arg>>
                            pipenv_skip_lock: <<parameters.pipenv_skip_lock>>
            - when:
                  condition:
                      not: <<parameters.use_pipenv>>
                  steps:
                      - setup_venv:
                            pip_install_args: <<parameters.pip_install_args>>
            - setup_badass_config:
                  wd: <<parameters.wd>>
            - steps: <<parameters.config>>
            - run_tests:
                  wd: <<parameters.wd>>
                  parallel: <<parameters.parallel>>
                  test_script: <<parameters.test_script>>
                  use_pipenv: <<parameters.use_pipenv>>
            - coverage_combine_and_html:
                  wd: <<parameters.wd>>
                  use_pipenv: <<parameters.use_pipenv>>
            - store_test_results:
                  path: test-results
            - store_artifacts:
                  path: test-results
                  destination: tr1
            - utils/rsync_folder:
                  when: always
                  folder: <<parameters.wd>>/htmlcov/
                  remote_folder: ${CIRCLE_BRANCH}/htmlcov_<<parameters.meta_job_name>>
                  host: docs
            - utils/make_coverage_shield:
                  when: always
                  link: https://${DOCS_HOST}/${CIRCLE_PROJECT_REPONAME}/artifacts/${CIRCLE_BRANCH}/htmlcov_<<parameters.meta_job_name>>/
            - utils/rsync_file:
                  when: always
                  file: /tmp/coverage.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.coverage.svg
                  host: docs
            - utils/make_status_shield:
                  when: on_success
                  status: passed
                  color: brightgreen
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/make_status_shield:
                  when: on_fail
                  status: failed
                  color: red
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  when: always
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
    badass_venv_test_pre_spread:
        parameters:
            <<: *pre_spread_common_parameters
            dash_r_files:
                description: "space seperated paths to requirements files."
                type: string
                default: "${CIRCLE_PROJECT_REPONAME}/requirements.txt ${CIRCLE_PROJECT_REPONAME}/test_requirements.txt"
            extra_pip_args:
                description: "Any additional arguments to pip install."
                type: string
                default: ""
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: true
        steps:
            - checkout
            - utils/add_ssh_config
            - utils/make_status_shield:
                  status: running
                  color: lightblue
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
            - steps: <<parameters.setup>>
            - run:
                  name: "Create cache checksum."
                  command: |
                      cd <<parameters.wd>>
                      sha256sum <<parameters.dash_r_files>> > /tmp/requirements-checksum
            - restore_cache:
                  keys:
                      - pip-{{ checksum "/etc/os-release" }}-<<parameters.meta_job_name>>-{{ .Branch }}-{{ checksum "/tmp/requirements-checksum" }}
                      - pip-{{ checksum "/etc/os-release" }}-<<parameters.meta_job_name>>-{{ .Branch }}
                      - pip-{{ checksum "/etc/os-release" }}-<<parameters.meta_job_name>>
            - run:
                  name: "Setup Python virtual environment"
                  command: |
                      mkdir -p logs/${CIRCLE_PROJECT_REPONAME}
                      cd <<parameters.wd>>
                      DASH_R_FILES_ARRAY=(<<parameters.dash_r_files>>)
                      DASH_R_FILES=${DASH_R_FILES_ARRAY[@]/#/-r }
                      pip install $DASH_R_FILES <<parameters.extra_pip_args>> | cat; test ${PIPESTATUS[0]} -eq 0
                      echo "import coverage; coverage.process_startup()" > `python -c "import sys; import os; print([x for x in sys.path if x.find(os.path.expanduser('~/.venv')) != -1 and x.find('site-packages') != -1][0] + '/coverage-all-the-things.pth')"`
            - save_cache:
                  paths:
                      - ~/.venv
                  key: pip-{{ checksum "/etc/os-release" }}-<<parameters.meta_job_name>>-{{ .Branch }}-{{ checksum "/tmp/requirements-checksum" }}
            - setup_badass_config:
                  wd: <<parameters.wd>>
            - steps: <<parameters.config>>
            - run:
                  name: "Create pip freeze file."
                  command: |
                      pip freeze > <<parameters.wd>>/pip.freeze
                  when: always
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project
                      - .venv
    badass_test_pre_spread:
        parameters:
            <<: *pre_spread_common_parameters
            pipenv_python_arg:
                description: "Location or version of the python interpreter to use for pipenv."
                type: string
                default: ""
            pipenv_skip_lock:
                description: "Skip use of the pipenv lock file."
                type: boolean
                default: false
            pipenv_cache_key_version:
                description: "a string that can be changed to bust the pipenv cache."
                type: string
                default: "1"
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: true
        steps:
            - checkout
            - utils/add_ssh_config
            - utils/make_status_shield:
                  status: running
                  color: lightblue
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
            - steps: <<parameters.setup>>
            - restore_cache:
                  keys:
                      - pipenv-{{ checksum "/etc/os-release" }}-<<parameters.meta_job_name>>-<<parameters.pipenv_cache_key_version>>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
                      - pipenv-{{ checksum "/etc/os-release" }}-<<parameters.meta_job_name>>-<<parameters.pipenv_cache_key_version>>-{{ .Branch }}
                      - pipenv-{{ checksum "/etc/os-release" }}-<<parameters.meta_job_name>>-<<parameters.pipenv_cache_key_version>>-main
            - setup_pipenv:
                  pipenv_python_arg: <<parameters.pipenv_python_arg>>
                  pipenv_skip_lock: <<parameters.pipenv_skip_lock>>
            - save_cache:
                  paths:
                      - ~/.local/share/virtualenvs
                  key: pipenv-{{ checksum "/etc/os-release" }}-<<parameters.meta_job_name>>-<<parameters.pipenv_cache_key_version>>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - steps: <<parameters.config>>
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - .local/share/virtualenvs
    badass_test_spread:
        parameters:
            repodir:
                description: "Location of the git repo (no trailing slash)."
                type: string
                default: ~/project
            wd:
                description: "Where tests should be run in the repo, relative to the repodir (no trailing slash)."
                type: string
                default: ${CIRCLE_PROJECT_REPONAME}
            executor:
                description: "Execution environment for the test job."
                type: executor
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
            parallel:
                description: "The level of test parallelism."
                type: integer
                default: 4
            test_script:
                description: "The test script to run (e.g., manage.py test)."
                type: string
                default: manage.py test
            parallelism:
                description: "The level of test parallelism via circleci splitting."
                type: integer
                default: 4
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz)."
                type: steps
                default: []
            config:
                description: "Any additional BMS configuration steps."
                type: steps
                default: []
            use_pipenv:
                description: "run commands using pipenv"
                type: boolean
                default: true
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        parallelism: <<parameters.parallelism>>
        working_directory: <<parameters.repodir>>
        steps:
            - checkout
            - steps: <<parameters.setup>>
            - attach_workspace:
                  at: ~/
            - steps: <<parameters.config>>
            - setup_badass_config:
                  wd: <<parameters.wd>>
            - run_tests_spread:
                  wd: <<parameters.wd>>
                  parallel: <<parameters.parallel>>
                  test_script: <<parameters.test_script>>
                  parallelism: <<parameters.parallelism>>
                  use_pipenv: <<parameters.use_pipenv>>
            - run:
                  name: Success flag
                  when: on_success
                  command: |
                      # use zero for success based on exit codes
                      echo '0' > <<parameters.wd>>/${CIRCLE_NODE_INDEX}.status
            - run:
                  name: Fail flag
                  when: on_fail
                  command: |
                      # use 1 for failure based on exit codes
                      echo '1' > <<parameters.wd>>/${CIRCLE_NODE_INDEX}.status
            - run:
                  name: Move to workspace folder
                  when: always
                  command: |
                      mkdir ~/workspace
                      cp <<parameters.wd>>/*.status ~/workspace/
                      cp <<parameters.wd>>/.coverage* ~/workspace/
                      if [ -f <<parameters.wd>>/pip.freeze ]; then
                          cp <<parameters.wd>>/pip.freeze ~/workspace/
                      fi
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - workspace
    badass_test_combine:
        parameters:
            repodir:
                description: "Location of the git repo (no trailing slash)."
                type: string
                default: ~/project
            wd:
                description: "Where tests should be run in the repo, relative to the repodir (no trailing slash)."
                type: string
                default: ${CIRCLE_PROJECT_REPONAME}
            badge_label:
                description: "The label to use for the badge."
                type: string
                default: tests
            meta_job_name:
                description: "The filename to use for the badge."
                type: string
            executor:
                description: "Execution environment for the test job."
                type: executor
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz)."
                type: steps
                default: []
            use_pipenv:
                description: "Use pipenv to run commands."
                type: boolean
                default: true
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        circleci_ip_ranges: true
        working_directory: <<parameters.repodir>>
        steps:
            - checkout
            - steps: <<parameters.setup>>
            - utils/add_ssh_config
            - attach_workspace:
                  at: ~/
            - run:
                  name: Restore workspace files
                  command: |
                      shopt -s dotglob
                      cp ~/workspace/* <<parameters.wd>>/
            - run:
                  name: Combine status
                  command: |
                      if [ $(cat <<parameters.wd>>/0.status) -eq "0" ]; then
                          diff -q --from-file <<parameters.wd>>/*.status && touch /tmp/passed
                      fi
            - utils/make_status_shield:
                  status: $([ -f /tmp/passed ] && echo "passed" || echo "failed")
                  color: $([ -f /tmp/passed ] && echo "brightgreen" || echo "red")
                  file: /tmp/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  when: always
                  file: /tmp/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
            - when:
                  condition:
                      not: <<parameters.use_pipenv>>
                  steps:
                      - utils/rsync_file:
                            when: always
                            file: <<parameters.wd>>/pip.freeze
                            remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.freeze
                            host: docs
            - coverage_combine_and_html:
                  wd: <<parameters.wd>>
                  use_pipenv: <<parameters.use_pipenv>>
            - utils/rsync_folder:
                  when: always
                  folder: <<parameters.wd>>/htmlcov/
                  remote_folder: ${CIRCLE_BRANCH}/htmlcov_<<parameters.meta_job_name>>
                  host: docs
            - utils/make_coverage_shield:
                  when: always
                  file: /tmp/coverage.svg
                  link: https://${DOCS_HOST}/${CIRCLE_PROJECT_REPONAME}/artifacts/${CIRCLE_BRANCH}/htmlcov_<<parameters.meta_job_name>>/
            - utils/rsync_file:
                  when: always
                  file: /tmp/coverage.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.coverage.svg
                  host: docs
commands:
    setup_pipenv:
        description: "Setup pipenv."
        parameters:
            pipenv_python_arg:
                description: "Location or version of the python interpreter to use for pipenv."
                type: string
                default: ""
            pipenv_skip_lock:
                description: "Skip use of the pipenv lock file."
                type: boolean
                default: false
        steps:
            - run:
                  name: Install pipenv packages
                  command: |
                      mkdir -p logs/${CIRCLE_PROJECT_REPONAME}
                      if [ "<<parameters.pipenv_python_arg>>" == "" ]; then
                          pipenv clean
                      else
                          pipenv clean --python <<parameters.pipenv_python_arg>>
                      fi
                      pipenv install --dev <<# parameters.pipenv_skip_lock>>--skip-lock<</ parameters.pipenv_skip_lock>>
                      export BADASS_PIPENV_VENV="$(pipenv --venv)"
                      echo "import sys; import os; print([x for x in sys.path if x.find(os.environ['BADASS_PIPENV_VENV']) != -1 and x.find('site-packages') != -1][0])" > get_coverage_pth_path.py
                      export BADASS_COVERAGE_PTH_PATH="$(pipenv run python get_coverage_pth_path.py)/coverage-all-the-things.pth"
                      echo "exec('try:\n\timport tomli; import coverage; coverage.process_startup()\nexcept ImportError:\n\tpass')" > "${BADASS_COVERAGE_PTH_PATH}"
                      rm get_coverage_pth_path.py
    setup_venv:
        description: "Set up the Python virtual environment."
        parameters:
            pip_install_args:
                description: "Any additional arguments to pip install (e.g., -r ./requirements.txt)."
                type: string
        steps:
            - run:
                  name: "Setup Python environment"
                  command: |
                      mkdir -p ./logs/${CIRCLE_PROJECT_REPONAME}
                      pip install <<parameters.pip_install_args>> | cat; test ${PIPESTATUS[0]} -eq 0
                      echo "import coverage; coverage.process_startup()" > `python -c "import sys; import os; print([x for x in sys.path if x.find(os.path.expanduser('~/.venv')) != -1 and x.find('site-packages') != -1][0] + '/coverage-all-the-things.pth')"`
    setup_badass_config:
        parameters:
            wd:
                description: "Where tests should be run in the repo (no trailing slash)."
                type: string
        steps:
            - run:
                  name: Setup badass config
                  command: |
                      cd <<parameters.wd>>
                      if [ -f "ci_config.json" ]; then
                          cp ci_config.json test_config.json
                      fi
                      export DJANGO_SECRET_KEY=$(openssl rand -base64 33)
                      jq '.DJANGO_SECRET_KEY = env.DJANGO_SECRET_KEY' test_config.json | sponge test_config.json
                      echo '{}' > config.json
    run_tests:
        description: "Run the test suite."
        parameters:
            wd:
                description: "Where tests should be run in the repo (no trailing slash)."
                type: string
            parallel:
                description: "The level of test parallelism."
                type: integer
            test_script:
                description: "The test script to run (e.g., manage.py test)."
                type: string
            use_pipenv:
                description: "run commands using pipenv"
                type: boolean
                default: true
        steps:
            - run:
                  name: Run test suite
                  command: |
                      cd <<parameters.wd>>
                      if [ "<<parameters.parallel>>" -eq "0" ]; then
                          <<# parameters.use_pipenv>>pipenv run<</ parameters.use_pipenv>> coverage run -p <<parameters.test_script>>
                      else
                          <<# parameters.use_pipenv>>pipenv run<</ parameters.use_pipenv>> coverage run -p <<parameters.test_script>> --parallel=<<parameters.parallel>>
                      fi
    run_tests_spread:
        description: "Run the test suite, split by amount of circleci parallelism."
        parameters:
            wd:
                description: "Where tests should be run in the repo (no trailing slash)."
                type: string
            parallel:
                description: "The level of test parallelism."
                type: integer
            test_script:
                description: "The test script to run (e.g., manage.py test)."
                type: string
            parallelism:
                description: "The level of test parallelism via circleci splitting."
                type: integer
            use_pipenv:
                description: "run commands using pipenv"
                type: boolean
                default: true
        steps:
            - run:
                  name: Run test suite, split by amount of circleci parallelism.
                  command: |
                      cd <<parameters.wd>>
                      if [ "<<parameters.parallelism>>" -eq "1" ]; then
                          TESTFILES=""
                      else
                          # https://discuss.circleci.com/t/python-django-tests-not-being-split-correctly/36624
                          # https://support.circleci.com/hc/en-us/articles/360048786831-Use-test-splitting-with-Python-Django-tests
                          # > Test discovery is based on the unittest module’s built-in test discovery.
                          # > By default, this will discover tests in any file named “test*.py” under
                          # > the current working directory.
                          TESTFILES=$(circleci tests glob "**/test*.py")
                          # reformat to remove duplicates, reformat back
                          echo $TESTFILES | tr ' ' '\n' | sort | uniq > /tmp/circleci_test_files.txt
                          TESTFILES=$(circleci tests split --split-by=timings /tmp/circleci_test_files.txt)
                          # massage filepaths into format manage.py test accepts
                          TESTFILES=$(echo $TESTFILES | tr "/" "." | sed 's/.py//g')
                      fi
                      if [ "<<parameters.parallel>>" -eq "0" ]; then
                          <<# parameters.use_pipenv>>pipenv run<</ parameters.use_pipenv>> coverage run -p <<parameters.test_script>> $TESTFILES
                      else
                          <<# parameters.use_pipenv>>pipenv run<</ parameters.use_pipenv>> coverage run -p <<parameters.test_script>> --parallel=<<parameters.parallel>> $TESTFILES
                      fi
            - store_test_results:
                  path: test-results
            - store_artifacts:
                  path: test-results
                  destination: tr1
    coverage_combine_and_html:
        description: "Combine coverage and generate reports."
        parameters:
            wd:
                description: "Where tests were run in the repo (no trailing slash)."
                type: string
            coveragep:
                description: "coverage percent output file name."
                type: string
                default: "/tmp/.coveragep"
            use_pipenv:
                description: "run commands using pipenv"
                type: boolean
                default: true
        steps:
            - run:
                  name: Combine coverage and build reports
                  command: |
                      cd <<parameters.wd>>
                      if ! [ -x "$(command -v coverage)" ]; then
                          echo "Installing coverage."
                          <<^ parameters.use_pipenv>>pip install --user coverage[toml]<</ parameters.use_pipenv>>
                      fi
                      <<# parameters.use_pipenv>>pipenv run<</ parameters.use_pipenv>> coverage combine
                      <<# parameters.use_pipenv>>pipenv run<</ parameters.use_pipenv>> coverage html
                      <<# parameters.use_pipenv>>pipenv run<</ parameters.use_pipenv>> coverage report | grep -oP '^TOTAL.*\d' | awk '{print $NF}' >> <<parameters.coveragep>>
                  when: always
