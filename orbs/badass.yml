version: 2.1
orbs:
    utils: arrai/utils@1.9.0
jobs:
    badass:
        parameters:
            repodir:
                description: "Location of the git repo (no trailing slash)."
                type: string
                default: ~/project
            wd:
                description: "Where tests should be run in the repo, relative to the repodir (no trailing slash)."
                type: string
                default: ${CIRCLE_PROJECT_REPONAME}
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz)."
                type: steps
                default: []
            config:
                description: "Any additional BMS configuration steps."
                type: steps
                default: []
            executor:
                description: "Execution environment for the test job."
                type: executor
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: medium
            parallel:
                description: "The level of test parallelism."
                type: integer
                default: 4
            badge_label:
                description: "The label to use for the badge."
                type: string
                default: tests
            meta_job_name:
                description: "The filename to use for the badge."
                type: string
            test_script:
                description: "The test script to run (e.g., manage.py test)."
                type: string
                default: manage.py test
            pipenv_python_arg:
                description: "Location or version of the python interpreter to use for pipenv."
                type: string
                default: ""
            pipenv_skip_lock:
                description: "Skip use of the pipenv lock file."
                type: boolean
                default: false
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        working_directory: <<parameters.repodir>>
        steps:
            - checkout
            - utils/add_maxmind_config
            - utils/add_ssh_config
            - utils/make_status_shield:
                  status: running
                  color: lightblue
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
            - steps: <<parameters.setup>>
            - setup_pipenv:
                  pipenv_python_arg: <<parameters.pipenv_python_arg>>
                  pipenv_skip_lock: <<parameters.pipenv_skip_lock>>
            - setup_badass_config:
                  wd: <<parameters.wd>>
            - steps: <<parameters.config>>
            - run_tests:
                  wd: <<parameters.wd>>
                  parallel: <<parameters.parallel>>
                  test_script: <<parameters.test_script>>
            - coverage_combine_and_html:
                  wd: <<parameters.wd>>
            - utils/rsync_folder:
                  when: always
                  folder: <<parameters.wd>>/htmlcov/
                  remote_folder: ${CIRCLE_BRANCH}/htmlcov_<<parameters.meta_job_name>>
                  host: docs
            - utils/make_coverage_shield:
                  when: always
                  link: https://${DOCS_HOST}/${CIRCLE_PROJECT_REPONAME}/artifacts/${CIRCLE_BRANCH}/htmlcov_<<parameters.meta_job_name>>/
            - utils/rsync_file:
                  when: always
                  file: /tmp/coverage.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.coverage.svg
                  host: docs
            - utils/make_status_shield:
                  when: on_success
                  status: passed
                  color: brightgreen
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/make_status_shield:
                  when: on_fail
                  status: failed
                  color: red
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  when: always
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
    badass_test_pre_spread:
        parameters:
            wd:
                description: "Where tests should be run in the repo, relative to the repodir (no trailing slash)."
                type: string
                default: ${CIRCLE_PROJECT_REPONAME}
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz)."
                type: steps
                default: []
            config:
                description: "Any additional BMS configuration steps."
                type: steps
                default: []
            executor:
                description: "Execution environment for the test job."
                type: executor
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: medium
            badge_label:
                description: "The label to use for the badge."
                type: string
                default: tests
            meta_job_name:
                description: "The filename to use for the badge."
                type: string
            pipenv_python_arg:
                description: "Location or version of the python interpreter to use for pipenv."
                type: string
                default: ""
            pipenv_skip_lock:
                description: "Skip use of the pipenv lock file."
                type: boolean
                default: false
            pipenv_cache_key_version:
                description: "a string that can be changed to bust the pipenv cache."
                type: string
                default: "1"
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        steps:
            - checkout
            - utils/add_ssh_config
            - utils/make_status_shield:
                  status: running
                  color: lightblue
                  file: ~/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  file: ~/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
            - steps: <<parameters.setup>>
            - restore_cache:
                  keys:
                      - pipenv-{{ arch }}-<<parameters.meta_job_name>>-<<parameters.pipenv_cache_key_version>>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
                      - pipenv-{{ arch }}-<<parameters.meta_job_name>>-<<parameters.pipenv_cache_key_version>>-{{ .Branch }}
                      - pipenv-{{ arch }}-<<parameters.meta_job_name>>-<<parameters.pipenv_cache_key_version>>-main
            - setup_pipenv:
                  pipenv_python_arg: <<parameters.pipenv_python_arg>>
                  pipenv_skip_lock: <<parameters.pipenv_skip_lock>>
            - save_cache:
                  paths:
                      - ~/.local/share/virtualenvs
                  key: pipenv-{{ arch }}-<<parameters.meta_job_name>>-<<parameters.pipenv_cache_key_version>>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - steps: <<parameters.config>>
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - .local/share/virtualenvs
    badass_test_spread:
        parameters:
            repodir:
                description: "Location of the git repo (no trailing slash)."
                type: string
                default: ~/project
            wd:
                description: "Where tests should be run in the repo, relative to the repodir (no trailing slash)."
                type: string
                default: ${CIRCLE_PROJECT_REPONAME}
            executor:
                description: "Execution environment for the test job."
                type: executor
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: medium
            parallel:
                description: "The level of test parallelism."
                type: integer
                default: 4
            test_script:
                description: "The test script to run (e.g., manage.py test)."
                type: string
                default: manage.py test
            parallelism:
                description: "The level of test parallelism via circleci splitting."
                type: integer
                default: 4
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz)."
                type: steps
                default: []
            config:
                description: "Any additional BMS configuration steps."
                type: steps
                default: []
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        parallelism: <<parameters.parallelism>>
        working_directory: <<parameters.repodir>>
        steps:
            - checkout
            - utils/add_maxmind_config
            - steps: <<parameters.setup>>
            - attach_workspace:
                  at: ~/
            - steps: <<parameters.config>>
            - setup_badass_config:
                  wd: <<parameters.wd>>
            - run_tests_spread:
                  wd: <<parameters.wd>>
                  parallel: <<parameters.parallel>>
                  test_script: <<parameters.test_script>>
                  parallelism: <<parameters.parallelism>>
            - run:
                  name: Success flag
                  when: on_success
                  command: |
                      # use zero for success based on exit codes
                      echo '0' > <<parameters.wd>>/${CIRCLE_NODE_INDEX}.status
            - run:
                  name: Fail flag
                  when: on_fail
                  command: |
                      # use 1 for failure based on exit codes
                      echo '1' > <<parameters.wd>>/${CIRCLE_NODE_INDEX}.status
            - run:
                  name: Move to workspace folder
                  when: always
                  command: |
                      mkdir ~/workspace
                      cp <<parameters.wd>>/*.status ~/workspace/
                      cp <<parameters.wd>>/.coverage* ~/workspace/
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - workspace
    badass_test_combine:
        parameters:
            repodir:
                description: "Location of the git repo (no trailing slash)."
                type: string
                default: ~/project
            wd:
                description: "Where tests should be run in the repo, relative to the repodir (no trailing slash)."
                type: string
                default: ${CIRCLE_PROJECT_REPONAME}
            badge_label:
                description: "The label to use for the badge."
                type: string
                default: tests
            meta_job_name:
                description: "The filename to use for the badge."
                type: string
            executor:
                description: "Execution environment for the test job."
                type: executor
            resource_class:
                description: "The resource class to use for the job."
                type: enum
                enum: [small, medium, medium+, large, xlarge, 2xlarge, 2xlarge+]
                default: small
            setup:
                description: "Any additional setup steps to run (e.g., yum install foo-bar-baz)."
                type: steps
                default:
                    - run:
                          name: Install additional OS packages
                          command: |
                              sudo apt update
                              sudo apt install rsync
        executor: <<parameters.executor>>
        resource_class: <<parameters.resource_class>>
        working_directory: <<parameters.repodir>>
        steps:
            - checkout
            - steps: <<parameters.setup>>
            - utils/add_ssh_config
            - attach_workspace:
                  at: ~/
            - run:
                  name: Restore workspace files
                  command: |
                      shopt -s dotglob
                      cp ~/workspace/* <<parameters.wd>>/
            - run:
                  name: Combine status
                  command: |
                      if [ $(cat <<parameters.wd>>/0.status) -eq "0" ]; then
                          diff -q --from-file <<parameters.wd>>/*.status && touch /tmp/passed
                      fi
            - utils/make_status_shield:
                  status: $([ -f /tmp/passed ] && echo "passed" || echo "failed")
                  color: $([ -f /tmp/passed ] && echo "brightgreen" || echo "red")
                  file: /tmp/status.svg
                  label: <<parameters.badge_label>>
            - utils/rsync_file:
                  when: always
                  file: /tmp/status.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.svg
                  host: docs
            - coverage_combine_and_html:
                  wd: <<parameters.wd>>
            - utils/rsync_folder:
                  when: always
                  folder: <<parameters.wd>>/htmlcov/
                  remote_folder: ${CIRCLE_BRANCH}/htmlcov_<<parameters.meta_job_name>>
                  host: docs
            - utils/make_coverage_shield:
                  when: always
                  file: /tmp/coverage.svg
                  link: https://${DOCS_HOST}/${CIRCLE_PROJECT_REPONAME}/artifacts/${CIRCLE_BRANCH}/htmlcov_<<parameters.meta_job_name>>/
            - utils/rsync_file:
                  when: always
                  file: /tmp/coverage.svg
                  remote_file: ${CIRCLE_BRANCH}/<<parameters.meta_job_name>>.coverage.svg
                  host: docs
commands:
    setup_pipenv:
        description: "Setup pipenv."
        parameters:
            pipenv_python_arg:
                description: "Location or version of the python interpreter to use for pipenv."
                type: string
                default: ""
            pipenv_skip_lock:
                description: "Skip use of the pipenv lock file."
                type: boolean
                default: false
        steps:
            - run:
                  name: Install pipenv packages
                  command: |
                      mkdir -p logs/${CIRCLE_PROJECT_REPONAME}
                      if [ "<<parameters.pipenv_python_arg>>" == "" ]; then
                          pipenv install --dev <<# parameters.pipenv_skip_lock>>--skip-lock<</ parameters.pipenv_skip_lock>>
                      else
                          pipenv install --dev --python <<parameters.pipenv_python_arg>> <<# parameters.pipenv_skip_lock>>--skip-lock<</ parameters.pipenv_skip_lock>>
                      fi
                      export BADASS_PIPENV_VENV="$(pipenv --venv)"
                      echo "import sys; import os; print([x for x in sys.path if x.find(os.environ['BADASS_PIPENV_VENV']) != -1 and x.find('site-packages') != -1][0])" > get_coverage_pth_path.py
                      export BADASS_COVERAGE_PTH_PATH="$(pipenv run python get_coverage_pth_path.py)/coverage-all-the-things.pth"
                      echo "exec('try:\n\timport tomli; import coverage; coverage.process_startup()\nexcept ImportError:\n\tpass')" > "${BADASS_COVERAGE_PTH_PATH}"
                      rm get_coverage_pth_path.py
    setup_badass_config:
        parameters:
            wd:
                description: "Where tests should be run in the repo (no trailing slash)."
                type: string
        steps:
            - run:
                  name: Setup badass config
                  command: |
                      cd <<parameters.wd>>
                      if [ -f "ci_config.json" ]; then
                          cp ci_config.json test_config.json
                      fi
                      export DJANGO_SECRET_KEY=$(openssl rand -base64 33)
                      jq '.DJANGO_SECRET_KEY = env.DJANGO_SECRET_KEY' test_config.json | sponge test_config.json
                      echo '{}' > config.json
    run_tests:
        description: "Run the test suite."
        parameters:
            wd:
                description: "Where tests should be run in the repo (no trailing slash)."
                type: string
            parallel:
                description: "The level of test parallelism."
                type: integer
            test_script:
                description: "The test script to run (e.g., manage.py test)."
                type: string
        steps:
            - run:
                  name: Run test suite
                  command: |
                      cd <<parameters.wd>>
                      if [ "<<parameters.parallel>>" -eq "0" ]; then
                          pipenv run coverage run -p <<parameters.test_script>>
                      else
                          pipenv run coverage run -p <<parameters.test_script>> --parallel=<<parameters.parallel>>
                      fi
    run_tests_spread:
        description: "Run the test suite, split by amount of circleci parallelism."
        parameters:
            wd:
                description: "Where tests should be run in the repo (no trailing slash)."
                type: string
            parallel:
                description: "The level of test parallelism."
                type: integer
            test_script:
                description: "The test script to run (e.g., manage.py test)."
                type: string
            parallelism:
                description: "The level of test parallelism via circleci splitting."
                type: integer
        steps:
            - run:
                  name: Run test suite, split by amount of circleci parallelism.
                  command: |
                      cd <<parameters.wd>>
                      if [ "<<parameters.parallelism>>" -eq "1" ]; then
                          TESTFILES=""
                      else
                          # https://discuss.circleci.com/t/python-django-tests-not-being-split-correctly/36624
                          # https://support.circleci.com/hc/en-us/articles/360048786831-Use-test-splitting-with-Python-Django-tests
                          # > Test discovery is based on the unittest module’s built-in test discovery.
                          # > By default, this will discover tests in any file named “test*.py” under
                          # > the current working directory.
                          TESTFILES=$(circleci tests glob "**/test*.py")
                          # reformat to remove duplicates, reformat back
                          echo $TESTFILES | tr ' ' '\n' | sort | uniq > /tmp/circleci_test_files.txt
                          TESTFILES=$(circleci tests split --split-by=timings /tmp/circleci_test_files.txt)
                          # massage filepaths into format manage.py test accepts
                          TESTFILES=$(echo $TESTFILES | tr "/" "." | sed 's/.py//g')
                      fi
                      if [ "<<parameters.parallel>>" -eq "0" ]; then
                          pipenv run coverage run -p <<parameters.test_script>> $TESTFILES
                      else
                          pipenv run coverage run -p <<parameters.test_script>> --parallel=<<parameters.parallel>> $TESTFILES
                      fi
            - store_test_results:
                  path: test-results
            - store_artifacts:
                  path: test-results
                  destination: tr1
    coverage_combine_and_html:
        description: "Combine coverage and generate reports."
        parameters:
            wd:
                description: "Where tests were run in the repo (no trailing slash)."
                type: string
            coveragep:
                description: "coverage percent output file name."
                type: string
                default: "/tmp/.coveragep"
        steps:
            - run:
                  name: Combine coverage and build reports
                  command: |
                      cd <<parameters.wd>>
                      pipenv run coverage combine
                      pipenv run coverage html
                      pipenv run coverage report | grep -oP '^TOTAL.*\d' | awk '{print $NF}' >> <<parameters.coveragep>>
                  when: always
    generate-hash:
        description: Generate a file with hashes from all informed files
        parameters:
            in-files:
                description: space delimited string with filenames to get hash from
                type: string
            out-file:
                description: the path to file to store in-files hashes
                type: string
                default: /tmp/infiles_checksums
            wd:
                description: "Where in the repo in-files is relative to (no trailing slash)."
                type: string
                default: .
        steps:
            - run:
                  name: Creates cache checksum
                  command: |
                      cd <<parameters.wd>>
                      sha256sum <<parameters.in-files>> > <<parameters.out-file>>
